name: Build
on:
  workflow_dispatch:
    # inputs:
    #   environment:
    #     description: 'Environment to deploy to. Dev is default'
    #     default: 'Dev'
    #     type: choice
    #     options:
    #     - Dev
    #     - QA
    #     - Prod

  push:
  #   branches:
  #   - main

run-name: "Build (${{github.ref_name}}) 1.0.0.${{github.run_number}}"

env:
  APP_ENV: ${{ github.event.inputs.environment || 'Dev' }}
  AZURE_WEBAPP_NAME: dyvenix-app1
  AZURE_WEBAPP_PACKAGE_PATH: src/app1.server/publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 9.0.x
  API_ROOT_DIR: src/app1.server
  ANG_ROOT_DIR: src/app1.client
  ANG_OUTPUT_PATH: dist
  VER_MAJOR: "1" 
  VER_MINOR: "0" 
  VER_PATCH: "0"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'Dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        ### Calc Version Number

      - name: Build version numbers
        run: |
          echo "VERSION=${{env.VER_MAJOR}}.${{env.VER_MINOR}}.${{env.VER_PATCH}}.${{github.run_number}}" >> $GITHUB_ENV  
          echo "SHORT_VERSION=${{env.VER_MAJOR}}.${{env.VER_MINOR}}.${{env.VER_PATCH}}" >> $GITHUB_ENV  
          echo "ARTIFACT_NAME=Dyvenix_AppServer_${{env.VER_MAJOR}}.${{env.VER_MINOR}}.${{env.VER_PATCH}}.${{github.run_number}}" >> $GITHUB_ENV  

        ### Build Solution

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.API_ROOT_DIR }}"

      - name: Build
        # run: dotnet build "${{ env.API_ROOT_DIR }}" --configuration ${{ env.CONFIGURATION }} --no-restore -p:Version=${{ env.VERSION }}
        run: dotnet build "./dyvenix.sln" --configuration ${{ env.CONFIGURATION }} --no-restore -p:Version=${{ env.VERSION }}

      # - name: Test
      #   run: dotnet test "${{ env.API_ROOT_DIR }}" --no-build

      # - name: Publish
      #   run: dotnet publish "${{ env.API_ROOT_DIR }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

      - name: Generate .env file
        run: |
          echo "APP_ENV=${{ inputs.environment }}" > .env
          echo "EV_AUTHCONFIG_DISABLED=${{ vars.EV_AUTHCONFIG_DISABLED }}" >> .env
          echo "EV_AUTHCONFIG_ALLOWEDORIGINS=${{ vars.EV_AUTHCONFIG_ALLOWEDORIGINS }}" >> .env
          cp .env ./${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/

      ### Build Angular

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   working-directory: ${{ env.ANG_ROOT_DIR }}
      #   run: npm ci

      # - name: Build Angular app
      #   working-directory: ${{ env.ANG_ROOT_DIR }}
      #   run: |
      #     npm version ${{ env.SHORT_VERSION }} --no-git-tag-version
      #     npm run build -- --configuration=production --output-path=${{ env.ANG_OUTPUT_PATH }}

      # - name: Move browser folder contents up
      #   working-directory: ${{ env.ANG_ROOT_DIR }}
      #   run: mv ${{ env.ANG_OUTPUT_PATH }}/browser/* ${{ env.ANG_OUTPUT_PATH }}/

      # - name: Move angular output to wwwroot
      #   run: | 
      #     mkdir ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/wwwroot/
      #     mv ${{ env.ANG_ROOT_DIR }}/${{ env.ANG_OUTPUT_PATH }}/* ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/wwwroot/

      # - name: Publish Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ env.ARTIFACT_NAME }}
      #     path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}











  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:

  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: webapp
  #         path: ${{ env.ANG_OUTPUT_PATH }}

  #     - name: Azure Login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.dyvenix_app1_SPN }}

  #     - name: Deploy to Azure WebApp
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME }}
  #         package: ${{ env.ANG_OUTPUT_PATH }}
