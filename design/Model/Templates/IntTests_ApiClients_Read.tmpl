//------------------------------------------------------------------------------------------------------------
// This file was auto-generated ${{CURR_TIMESTAMP}}. Any changes made to it will be lost.
//------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Xunit.Abstractions;
using Dyvenix.App1.Common.ApiClients;
using Dyvenix.App1.Tests.Common.Data;

namespace ${{INT_TESTS_NS}};

#region Fixture

public class ${{ENTITY_NAME}}ReadTestsFixture : IClassFixture<GlobalTestFixture>, IDisposable
{
	public ${{ENTITY_NAME}}ReadTestsFixture(GlobalTestFixture globalFixture)
	{
		ServerApiFactory = new ServerApiFactory();
		ServiceProvider = ServerApiFactory.Services;

		var dataManager = ServiceProvider.GetRequiredService<IDataManager>();

		// Reset db here once for this class and cache the test data, because all tests are reading data only, no inserts/updates/deletes
		this.DataSet = dataManager.ResetDataSet(DataSetType.Default).GetAwaiter().GetResult();

		this.${{ENTITY_NAME}}ApiClient = ServiceProvider.GetRequiredService<I${{ENTITY_NAME}}ApiClient>();
	}

	public ServerApiFactory ServerApiFactory { get; private set; }
	public IServiceProvider ServiceProvider { get; }

	public I${{ENTITY_NAME}}ApiClient ${{ENTITY_NAME}}ApiClient { get; }
	public DataSet DataSet { get; }

	public void Dispose()
	{
	}
}

#endregion

[Collection("Global Collection")]
public class ${{ENTITY_NAME}}ReadTests : IClassFixture<${{ENTITY_NAME}}ReadTestsFixture>, IDisposable
{
	private static readonly Random _random = new Random();

	#region Fields

	private readonly I${{ENTITY_NAME}}ApiClient _apiClient;
	private readonly DataSet _ds;

	#endregion

	#region Ctors / Init

	public ${{ENTITY_NAME}}ReadTests(${{ENTITY_NAME}}ReadTestsFixture classFixture, ITestOutputHelper output)
	{
		_apiClient = classFixture.${{ENTITY_NAME}}ApiClient;
		_ds = classFixture.DataSet;
	}

	public void Dispose()
	{
	}

	#endregion
${{TEST_METHODS}}
	#region Helper Methods

	private static int Rnd(int x, int y)
	{
		if (x > y)
			throw new ArgumentException("x must be less than or equal to y");
		return _random.Next(x, y + 1); // +1 to include 'y'
	}

	#endregion
}

