//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Dyvenix.App1.Data.Entities;

namespace Dyvenix.App1.Data.Contexts
{

    public partial class Db : DbContext
    {
        public Db() :
            base()
        {
            OnCreated();
        }

        public Db(DbContextOptions<Db> options) :
            base(options)
        {
            OnCreated();
        }

        #region Properties

        public virtual DbSet<AppUser> AppUser { get; set; }

        public virtual DbSet<AccessClaim> AccessClaim { get; set; }

        public virtual DbSet<LogEvent> LogEvent { get; set; }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AppUserMapping(modelBuilder);
            this.CustomizeAppUserMapping(modelBuilder);

            this.AccessClaimMapping(modelBuilder);
            this.CustomizeAccessClaimMapping(modelBuilder);

            this.LogEventMapping(modelBuilder);
            this.CustomizeLogEventMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region AppUser Mapping

        private void AppUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppUser>().ToTable(@"AppUser");
            modelBuilder.Entity<AppUser>().Property<System.Guid>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AppUser>().Property<string>(x => x.IdentityId).HasColumnName(@"IdentityId").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<AppUser>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<AppUser>().Property<string>(x => x.LastName).HasColumnName(@"LastName").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<AppUser>().Property<string>(x => x.Email).HasColumnName(@"Email").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<AppUser>().HasKey(@"Id");
            modelBuilder.Entity<AppUser>().HasIndex(@"IdentityId").IsUnique(false);
            modelBuilder.Entity<AppUser>().HasIndex(@"LastName").IsUnique(false);
            modelBuilder.Entity<AppUser>().HasIndex(@"Email").IsUnique(false);
        }
	
        partial void CustomizeAppUserMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region AccessClaim Mapping

        private void AccessClaimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessClaim>().ToTable(@"AccessClaim");
            modelBuilder.Entity<AccessClaim>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AccessClaim>().Property<string>(x => x.ClaimName).HasColumnName(@"ClaimName").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AccessClaim>().Property<string>(x => x.ClaimValue).HasColumnName(@"ClaimValue").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AccessClaim>().Property<System.Guid>(x => x.AppUserId).HasColumnName(@"AppUserId").ValueGeneratedNever();
            modelBuilder.Entity<AccessClaim>().HasKey(@"Id");
            modelBuilder.Entity<AccessClaim>().HasIndex(@"AppUserId").IsUnique(false);
        }
	
        partial void CustomizeAccessClaimMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region LogEvent Mapping

        private void LogEventMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogEvent>().ToTable(@"LogEvents", @"Logs");
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd().HasMaxLength(50);
            modelBuilder.Entity<LogEvent>().Property<System.DateTime>(x => x.TimeStampUTC).HasColumnName(@"TimeStampUTC").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LogEvent>().Property<int>(x => x.LogLevel).HasColumnName(@"LogLevel").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.Application).HasColumnName(@"Application").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.Source).HasColumnName(@"Source").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.Message).HasColumnName(@"Message").IsRequired().ValueGeneratedNever().HasMaxLength(0);
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.CorrelationId).HasColumnName(@"CorrelationId").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<LogEvent>().Property<string>(x => x.Exception).HasColumnName(@"Exception").IsRequired().ValueGeneratedNever().HasMaxLength(0);
            modelBuilder.Entity<LogEvent>().HasKey(@"Id");
            modelBuilder.Entity<LogEvent>().HasIndex(@"TimeStampUTC").IsUnique(false);
        }
	
        partial void CustomizeLogEventMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region AppUser Navigation properties

            modelBuilder.Entity<AppUser>().HasMany(x => x.AccessClaims).WithOne().IsRequired(true).HasForeignKey(@"AppUserId");

        #endregion

        #region AccessClaim Navigation properties


        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
